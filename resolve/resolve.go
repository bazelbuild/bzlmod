package resolve

import (
	"fmt"
	"github.com/bazelbuild/bzlmod/registry"
	"html/template"
	"os"
	"path/filepath"
)

func Resolve(wsDir string, reg registry.RegistryHandler) error {
	discoveryResult, err := Discovery(wsDir, reg)
	if err != nil {
		return fmt.Errorf("error during discovery: %v", err)
	}
	Selection(discoveryResult.DepGraph, discoveryResult.OverrideSet)
	// TODO: run module rules
	if err = writeLockFile(wsDir, discoveryResult.DepGraph); err != nil {
		return fmt.Errorf("error writing lockfile: %v", err)
	}
	if err = writeWorkspaceFile(wsDir, discoveryResult); err != nil {
		return fmt.Errorf("error writing workspace file: %v", err)
	}
	return nil
}

func writeLockFile(wsDir string, depGraph DepGraph) error {
	// TODO
	return nil
}

const workspaceTemplate = `# This file is automatically generated by bzlmod
workspace({{if .WsName}}
    name = "{{.WsName}}",{{end}}
    watch_files = { "MODULE.bazel": "{{.Integrity}}" },
    refresh_command = ["bzlmod", "resolve"],
)
{{range $name, $repo := .Repos}}
repo(
    name = "{{$name}}",
    fetch_command = ["bzlmod", "fetch", "{{$name}}"],
    fingerprint = "{{$repo.Fingerprint}}",{{if $repo.Deps}}
    repo_deps = { {{- range $key, $value := $repo.Deps }}
        "{{$key}}": "{{$value}}",{{end}}
    },{{end}}
)
{{end}}`

func writeWorkspaceFile(wsDir string, discoveryResult DiscoveryResult) error {
	type repoData struct {
		Fingerprint string
		Deps        map[string]string
	}
	data := struct {
		WsName    string
		Integrity string
		Repos     map[string]repoData
	}{
		WsName:    discoveryResult.RootModuleName,
		Integrity: "sha256-fakevalue", // TODO
		Repos:     make(map[string]repoData),
	}

	// Fill repoName for each module. TODO: move earlier
	for moduleKey, module := range discoveryResult.DepGraph {
		module.RepoName = moduleKey.Name
	}
	rootModule := discoveryResult.DepGraph[ModuleKey{discoveryResult.RootModuleName, ""}]
	rootModule.RepoName = ""
	for repoName, depKey := range rootModule.Deps {
		discoveryResult.DepGraph[depKey].RepoName = repoName
	}

	// Now fill the data struct.
	for _, module := range discoveryResult.DepGraph {
		if module.RepoName == "" {
			continue
		}
		repoDeps := make(map[string]string)
		data.Repos[module.RepoName] = repoData{
			Fingerprint: "fakefingerprint", // TODO
			Deps:        repoDeps,
		}
		for depRepoName, depKey := range module.Deps {
			repoDeps[depRepoName] = discoveryResult.DepGraph[depKey].RepoName
		}
	}

	t := template.Must(template.New("workspace").Parse(workspaceTemplate))
	f, err := os.Create(filepath.Join(wsDir, "WORKSPACE"))
	if err != nil {
		return err
	}
	if err = t.Execute(f, data); err != nil {
		return err
	}
	return nil
}
